  //快排
void qsort(inr arr[],int left,int right)
{
	int mid=mid(arr,0,arr.size()-1);
	qsort(arr,0,mid-1);
	qsort(arr,mid+1,arr.size()-1);
}
int mid(inr arr[],int left,int right)
{
	int point=arr[left];
	while(left<right)
	{
		while(left<right&&arr[right]>=point)
		{
			right--; 
		}
		arr[left]=arr[right];
		while(left<right&&arr[left]<=point)
		{
			left++;
		}
		arr[right]=arr[left];
	}
	arr[left]=point;
	return left;
}

//归并
void MergeSort(int arr[],int n)
{
	MergeSort_DC(arr,0,n-1);
}
void MergeSort_DC(int arr[],int left,int right)
{
	int mid=(left+right)/2;
	if(left<right)
	{
		MergeSort_DC(arr,left,mid);
		MergeSort_DC(arr,mid+1,right);
		Merge(arr,left,mid,right);
	}
}
void Merge(int arr[],int left,int mid,int right)
{
	int i=left,j=mid+1;
	int k=0;
	int temp=new int[right-left+1];
	while(i<=mid&&j<=right)
	{
		if(arr[i]<arr[j])
		{
			temp[k++]=arr[i++];
		}
		if(arr[i]>arr[j])
		{
			temp[k++]=arr[j++];
		}
	}
	while(i<=mid)
	{
		temp[k++]=arr[i++];
	}
	while(j<=right)
	{
		temp[k++]=arr[j++];
	}
	for(int i=0;i<k;i++)
	{
		arr[i]=temp[i];
	}
	delete[] temp;
}

//堆排序
//维护堆的函数
void heapify(int arr[],int n,int i)
{
	int largeset=i;
	int lson=2*i+1;
	int rson=2*i+2;
	if(lson<n&&arr[largeset]<arr[lson])  //两个if找出左右孩子之间的最大值，并把下标赋给largeset
	{
		largeset=lson;
	}
	if(rson<n&&arr[largeset]<arr[rson])
	{
		largeset=rson;
	}
	if(largeset!=i)
	{
		swap(arr[largeset],arr[i]);
		heapify(arr,n,largeset);   //largeset所在的位置可能也不满足大根堆，所以要递归的调整
	}
}
void heapSort(int arr,int n)
{
	//建堆
	int i;
	for(i=n/2-1;i>=0;i--)//必须从最后一个叶子节点的父亲节点开始调整
	{
		heapify(arr,n,i);
	}
	
	//排序
	for(i=n-1;i>=0;i--)
	{
		swap(arr[i],arr[0]);
		heapify(arr,i,0);
	}
}

//希尔排序
void shell_sort(int arr[],int n)
{
	int key,i,j,inc;//inc表示增量,从n/2开始,每次都除以2
	for(inc=n/2;inc>0;inc/=2)
	{
		for(i=inc;i<n;i++)      
		{
			key=arr[i];
			//使用insert_sort来排序
			for(j=i;j>=inc&&arr[j-inc]>key;j-=inc)//把arr[j-inc]>key改成arr[j-inc]<key就变成了从大到小排序
			{
				arr[j]=arr[j-inc];
			}
			arr[j]=key;
		}
	}
}

//插入排序
void insert_sort(int arr[],int n)
{
	int temp,i,j;
	for(i=1;i<n;i++)
	{
		temp=arr[i];
		for(j=i-1;j>=0&&arr[j]>key;j--)
		{
			arr[j+1]=arr[j];
		}
		arr[j+1]=temp;
	}
}

//选择排序
void selection_sort(int arr,int n)
{
	int min;
	for(int i=0;i<n;i++)
	{
		min=i;
		for(int j=i+1;j<n;j++)
		{
			if(arr[j]<arr[min])
			{
				min=j;
			}
		}
		swap(arr[min],arr[i]);
	}
}
	
//冒泡排序
void bubble_sort(int arr[], int n)
{
	for (int i = 0; i < n - 1; i++)
	{
		for (int j = 0; j < n - i - 1; j++)
		{
			if (arr[j] > arr[j + 1])
			{
				swap(arr[j], arr[j + 1]);
			}
		}
	}
}
	
	
	
	
	
	
	
	
	
	
	
	
	

